(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
//  ================
//  === EASY LOG ===
//  ================
// usage: log('inside coolFunc', this, arguments);
// paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/
window.log = function f() {
		log.history = log.history || [];
		log.history.push(arguments);
		if (this.console) {
				var args = arguments,
						newarr;
				try {
						args.callee = f.caller;
				} catch (e) {}
				newarr = [].slice.call(args);
				if (typeof console.log === 'object')  {
					log.apply.call(console.log, console, newarr);
				} else {
					console.log.apply(console, newarr);
				}
		}
};
},{}],2:[function(require,module,exports){
/*!
Included shims: Array.forEach,Array.filter,Array.map,Function.bind,EventListener
*/

/*
    Array.prototype.forEach()
*/
if (!Array.prototype.forEach) {
    Array.prototype.forEach = function(t, e) {
        var n, r;
        if (this == null) {
            throw new TypeError(" this is null or not defined");
        }
        // 1. Let O be the result of calling ToObject passing the |this| value as the argument.
        var i = Object(this);
        // 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".
        // 3. Let len be ToUint32(lenValue).
        var o = i.length >>> 0;
        // 4. If IsCallable(callback) is false, throw a TypeError exception.
        // See: http://es5.github.com/#x9.11
        if (typeof t !== "function") {
            throw new TypeError(t + " is not a function");
        }
        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (e) {
            n = e;
        }
        // 6. Let k be 0
        r = 0;
        // 7. Repeat, while k < len
        while (r < o) {
            var a;
            // a. Let Pk be ToString(k).
            //   This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.
            //   This step can be combined with c
            // c. If kPresent is true, then
            if (r in i) {
                // i. Let kValue be the result of calling the Get internal method of O with argument Pk.
                a = i[r];
                // ii. Call the Call internal method of callback with T as the this value and
                // argument list containing kValue, k, and O.
                t.call(n, a, r, i);
            }
            // d. Increase k by 1.
            r++;
        }
    };
}

/*
    Array.prototype.filter()
*/
if (!Array.prototype.filter) {
    Array.prototype.filter = function(t) {
        "use strict";
        if (this === void 0 || this === null) throw new TypeError();
        var e = Object(this);
        var n = e.length >>> 0;
        if (typeof t !== "function") throw new TypeError();
        var r = [];
        var i = arguments.length >= 2 ? arguments[1] : void 0;
        for (var o = 0; o < n; o++) {
            if (o in e) {
                var a = e[o];
                // NOTE: Technically this should Object.defineProperty at
                //       the next index, as push can be affected by
                //       properties on Object.prototype and Array.prototype.
                //       But that method's new, and collisions should be
                //       rare, so use the more-compatible alternative.
                if (t.call(i, a, o, e)) r.push(a);
            }
        }
        return r;
    };
}

/*
   Array map patch
   ========================================================================== */
if (!("map" in Array.prototype)) {
    Array.prototype.map = function(t, e) {
        var n = this.length >>> 0, r = Array(n);
        for (var i = 0; i < n; i++) {
            if (i in this) {
                r[i] = t.call(e, this[i], i, this);
            }
        }
        return r;
    };
}

/*
    Function.prototype.bind()
*/
if (!Function.prototype.bind) {
    Function.prototype.bind = function(t) {
        if (typeof this !== "function") {
            // closest thing possible to the ECMAScript 5
            // internal IsCallable function
            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
        }
        var e = Array.prototype.slice.call(arguments, 1), n = this, r = function() {}, i = function() {
            return n.apply(this instanceof r && t ? this : t, e.concat(Array.prototype.slice.call(arguments)));
        };
        r.prototype = this.prototype;
        i.prototype = new r();
        return i;
    };
}

// EventListener | MIT/GPL2 | https://github.com/jonathantneal/EventListener
this.Element && Element.prototype.attachEvent && !Element.prototype.addEventListener && function() {
    function t(t, e) {
        Window.prototype[t] = HTMLDocument.prototype[t] = Element.prototype[t] = e;
    }
    // add
    t("addEventListener", function(t, e) {
        var n = this, r = n.addEventListener.listeners = n.addEventListener.listeners || {}, i = r[t] = r[t] || [];
        // if no events exist, attach the listener
        if (!i.length) {
            n.attachEvent("on" + t, i.event = function(t) {
                var e = n.document && n.document.documentElement || n.documentElement || {
                    scrollLeft: 0,
                    scrollTop: 0
                };
                // polyfill w3c properties and methods
                t.currentTarget = n;
                t.pageX = t.clientX + e.scrollLeft;
                t.pageY = t.clientY + e.scrollTop;
                t.preventDefault = function() {
                    t.returnValue = false;
                };
                t.relatedTarget = t.fromElement || null;
                t.stopImmediatePropagation = function() {
                    l = false;
                    t.cancelBubble = true;
                };
                t.stopPropagation = function() {
                    t.cancelBubble = true;
                };
                t.target = t.srcElement || n;
                t.timeStamp = +new Date();
                // create an cached list of the master events list (to protect this loop from breaking when an event is removed)
                for (var r = 0, o = [].concat(i), a, l = true; l && (a = o[r]); ++r) {
                    // check to see if the cached event still exists in the master events list
                    for (var c = 0, s; s = i[c]; ++c) {
                        if (s == a) {
                            s.call(n, t);
                            break;
                        }
                    }
                }
            });
        }
        // add the event to the master event list
        i.push(e);
    });
    // remove
    t("removeEventListener", function(t, e) {
        var n = this, r = n.addEventListener.listeners = n.addEventListener.listeners || {}, i = r[t] = r[t] || [];
        // remove the newest matching event from the master event list
        for (var o = i.length - 1, a; a = i[o]; --o) {
            if (a == e) {
                i.splice(o, 1);
                break;
            }
        }
        // if no events exist, detach the listener
        if (!i.length && i.event) {
            n.detachEvent("on" + t, i.event);
        }
    });
    // dispatch
    t("dispatchEvent", function(t) {
        var e = this, n = t.type, r = e.addEventListener.listeners = e.addEventListener.listeners || {}, i = r[n] = r[n] || [];
        try {
            return e.fireEvent("on" + n, t);
        } catch (o) {
            if (i.event) {
                i.event(t);
            }
            return;
        }
    });
    // CustomEvent
    Object.defineProperty(Window.prototype, "CustomEvent", {
        get: function() {
            var t = this;
            return function e(n, r) {
                var i = t.document.createEventObject(), o;
                i.type = n;
                for (o in r) {
                    if (o == "cancelable") {
                        i.returnValue = !r.cancelable;
                    } else if (o == "bubbles") {
                        i.cancelBubble = !r.bubbles;
                    } else if (o == "detail") {
                        i.detail = r.detail;
                    }
                }
                return i;
            };
        }
    });
    // ready
    function e(t) {
        if (e.interval && document.body) {
            e.interval = clearInterval(e.interval);
            document.dispatchEvent(new CustomEvent("DOMContentLoaded"));
        }
    }
    e.interval = setInterval(e, 1);
    window.addEventListener("load", e);
}();

!this.CustomEvent && function() {
    // CustomEvent for browsers which don't natively support the Constructor method
    window.CustomEvent = function t(e, n) {
        var r;
        n = n || {
            bubbles: false,
            cancelable: false,
            detail: undefined
        };
        try {
            r = document.createEvent("CustomEvent");
            r.initCustomEvent(e, n.bubbles, n.cancelable, n.detail);
        } catch (i) {
            // for browsers which don't support CustomEvent at all, we use a regular event instead
            r = document.createEvent("Event");
            r.initEvent(e, n.bubbles, n.cancelable);
            r.detail = n.detail;
        }
        return r;
    };
}();
},{}],3:[function(require,module,exports){
/*
	sockets.js
*/

// dependencies for this module go here
// var UI = require('./ui');

var Sockets = {
	socket : null,

	init : function () {
		console.debug('Sockets module is being initialised');

		this.makeSocketConnection();

		this.Listeners.setup();
	},

	makeSocketConnection : function () {
		var connectionURL = window.location.hostname + ':' + window.location.port;

		this.socket = io.connect(connectionURL);
	},

	Listeners : {
		setup : function () {
			Sockets.socket.on('traintimes', this.onTimesReceived);
		},
		onTimesReceived : function (times) {
			// log('times received', times);

			var timetable = document.querySelector('.trainTimetable'),
				tableHTML = ''

			for (time in times.trainServices) {
				tableHTML += `<tr>
				<td>${times.trainServices[time].std}</td>
				<td>${times.trainServices[time].etd}</td>
				<td>${times.trainServices[time].platform}</td>
				<td>${times.trainServices[time].operator}</td>`;
			}
			timetable.innerHTML = tableHTML;
		}
	}
};

module.exports = Sockets;
},{}],4:[function(require,module,exports){
// --------------------------------------------- //
// DEFINE GLOBAL LIBS                            //
// --------------------------------------------- //
// Uncomment the line below to expose jQuery as a global object to the usual places
// window.jQuery = window.$ = require('./libs/jquery/jquery-1.10.2.js');

// force compilation of global libs that don't return a value.
require("./helpers/log");
require("./helpers/shims");

var Sockets = require('./modules/sockets');


//initialise KO object
var KO = {};

KO.Config = {
	init : function () {
		Sockets.init();
	}
};


KO.Config.init();
},{"./helpers/log":1,"./helpers/shims":2,"./modules/sockets":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJwdWJsaWMvanMvaGVscGVycy9sb2cuanMiLCJwdWJsaWMvanMvaGVscGVycy9zaGltcy5qcyIsInB1YmxpYy9qcy9tb2R1bGVzL3NvY2tldHMuanMiLCJwdWJsaWMvanMvc2NyaXB0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vICA9PT09PT09PT09PT09PT09XG4vLyAgPT09IEVBU1kgTE9HID09PVxuLy8gID09PT09PT09PT09PT09PT1cbi8vIHVzYWdlOiBsb2coJ2luc2lkZSBjb29sRnVuYycsIHRoaXMsIGFyZ3VtZW50cyk7XG4vLyBwYXVsaXJpc2guY29tLzIwMDkvbG9nLWEtbGlnaHR3ZWlnaHQtd3JhcHBlci1mb3ItY29uc29sZWxvZy9cbndpbmRvdy5sb2cgPSBmdW5jdGlvbiBmKCkge1xuXHRcdGxvZy5oaXN0b3J5ID0gbG9nLmhpc3RvcnkgfHwgW107XG5cdFx0bG9nLmhpc3RvcnkucHVzaChhcmd1bWVudHMpO1xuXHRcdGlmICh0aGlzLmNvbnNvbGUpIHtcblx0XHRcdFx0dmFyIGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRuZXdhcnI7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRhcmdzLmNhbGxlZSA9IGYuY2FsbGVyO1xuXHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0XHRuZXdhcnIgPSBbXS5zbGljZS5jYWxsKGFyZ3MpO1xuXHRcdFx0XHRpZiAodHlwZW9mIGNvbnNvbGUubG9nID09PSAnb2JqZWN0JykgIHtcblx0XHRcdFx0XHRsb2cuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgbmV3YXJyKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBuZXdhcnIpO1xuXHRcdFx0XHR9XG5cdFx0fVxufTsiLCIvKiFcclxuSW5jbHVkZWQgc2hpbXM6IEFycmF5LmZvckVhY2gsQXJyYXkuZmlsdGVyLEFycmF5Lm1hcCxGdW5jdGlvbi5iaW5kLEV2ZW50TGlzdGVuZXJcclxuKi9cclxuXHJcbi8qXHJcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCgpXHJcbiovXHJcbmlmICghQXJyYXkucHJvdG90eXBlLmZvckVhY2gpIHtcclxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24odCwgZSkge1xyXG4gICAgICAgIHZhciBuLCByO1xyXG4gICAgICAgIGlmICh0aGlzID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIiB0aGlzIGlzIG51bGwgb3Igbm90IGRlZmluZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDEuIExldCBPIGJlIHRoZSByZXN1bHQgb2YgY2FsbGluZyBUb09iamVjdCBwYXNzaW5nIHRoZSB8dGhpc3wgdmFsdWUgYXMgdGhlIGFyZ3VtZW50LlxyXG4gICAgICAgIHZhciBpID0gT2JqZWN0KHRoaXMpO1xyXG4gICAgICAgIC8vIDIuIExldCBsZW5WYWx1ZSBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIEdldCBpbnRlcm5hbCBtZXRob2Qgb2YgTyB3aXRoIHRoZSBhcmd1bWVudCBcImxlbmd0aFwiLlxyXG4gICAgICAgIC8vIDMuIExldCBsZW4gYmUgVG9VaW50MzIobGVuVmFsdWUpLlxyXG4gICAgICAgIHZhciBvID0gaS5sZW5ndGggPj4+IDA7XHJcbiAgICAgICAgLy8gNC4gSWYgSXNDYWxsYWJsZShjYWxsYmFjaykgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cclxuICAgICAgICAvLyBTZWU6IGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDkuMTFcclxuICAgICAgICBpZiAodHlwZW9mIHQgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHQgKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gNS4gSWYgdGhpc0FyZyB3YXMgc3VwcGxpZWQsIGxldCBUIGJlIHRoaXNBcmc7IGVsc2UgbGV0IFQgYmUgdW5kZWZpbmVkLlxyXG4gICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgIG4gPSBlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyA2LiBMZXQgayBiZSAwXHJcbiAgICAgICAgciA9IDA7XHJcbiAgICAgICAgLy8gNy4gUmVwZWF0LCB3aGlsZSBrIDwgbGVuXHJcbiAgICAgICAgd2hpbGUgKHIgPCBvKSB7XHJcbiAgICAgICAgICAgIHZhciBhO1xyXG4gICAgICAgICAgICAvLyBhLiBMZXQgUGsgYmUgVG9TdHJpbmcoaykuXHJcbiAgICAgICAgICAgIC8vICAgVGhpcyBpcyBpbXBsaWNpdCBmb3IgTEhTIG9wZXJhbmRzIG9mIHRoZSBpbiBvcGVyYXRvclxyXG4gICAgICAgICAgICAvLyBiLiBMZXQga1ByZXNlbnQgYmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBIYXNQcm9wZXJ0eSBpbnRlcm5hbCBtZXRob2Qgb2YgTyB3aXRoIGFyZ3VtZW50IFBrLlxyXG4gICAgICAgICAgICAvLyAgIFRoaXMgc3RlcCBjYW4gYmUgY29tYmluZWQgd2l0aCBjXHJcbiAgICAgICAgICAgIC8vIGMuIElmIGtQcmVzZW50IGlzIHRydWUsIHRoZW5cclxuICAgICAgICAgICAgaWYgKHIgaW4gaSkge1xyXG4gICAgICAgICAgICAgICAgLy8gaS4gTGV0IGtWYWx1ZSBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIEdldCBpbnRlcm5hbCBtZXRob2Qgb2YgTyB3aXRoIGFyZ3VtZW50IFBrLlxyXG4gICAgICAgICAgICAgICAgYSA9IGlbcl07XHJcbiAgICAgICAgICAgICAgICAvLyBpaS4gQ2FsbCB0aGUgQ2FsbCBpbnRlcm5hbCBtZXRob2Qgb2YgY2FsbGJhY2sgd2l0aCBUIGFzIHRoZSB0aGlzIHZhbHVlIGFuZFxyXG4gICAgICAgICAgICAgICAgLy8gYXJndW1lbnQgbGlzdCBjb250YWluaW5nIGtWYWx1ZSwgaywgYW5kIE8uXHJcbiAgICAgICAgICAgICAgICB0LmNhbGwobiwgYSwgciwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZC4gSW5jcmVhc2UgayBieSAxLlxyXG4gICAgICAgICAgICByKys7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuLypcclxuICAgIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoKVxyXG4qL1xyXG5pZiAoIUFycmF5LnByb3RvdHlwZS5maWx0ZXIpIHtcclxuICAgIEFycmF5LnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgaWYgKHRoaXMgPT09IHZvaWQgMCB8fCB0aGlzID09PSBudWxsKSB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgdmFyIGUgPSBPYmplY3QodGhpcyk7XHJcbiAgICAgICAgdmFyIG4gPSBlLmxlbmd0aCA+Pj4gMDtcclxuICAgICAgICBpZiAodHlwZW9mIHQgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIHZhciByID0gW107XHJcbiAgICAgICAgdmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoID49IDIgPyBhcmd1bWVudHNbMV0gOiB2b2lkIDA7XHJcbiAgICAgICAgZm9yICh2YXIgbyA9IDA7IG8gPCBuOyBvKyspIHtcclxuICAgICAgICAgICAgaWYgKG8gaW4gZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGEgPSBlW29dO1xyXG4gICAgICAgICAgICAgICAgLy8gTk9URTogVGVjaG5pY2FsbHkgdGhpcyBzaG91bGQgT2JqZWN0LmRlZmluZVByb3BlcnR5IGF0XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICB0aGUgbmV4dCBpbmRleCwgYXMgcHVzaCBjYW4gYmUgYWZmZWN0ZWQgYnlcclxuICAgICAgICAgICAgICAgIC8vICAgICAgIHByb3BlcnRpZXMgb24gT2JqZWN0LnByb3RvdHlwZSBhbmQgQXJyYXkucHJvdG90eXBlLlxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgQnV0IHRoYXQgbWV0aG9kJ3MgbmV3LCBhbmQgY29sbGlzaW9ucyBzaG91bGQgYmVcclxuICAgICAgICAgICAgICAgIC8vICAgICAgIHJhcmUsIHNvIHVzZSB0aGUgbW9yZS1jb21wYXRpYmxlIGFsdGVybmF0aXZlLlxyXG4gICAgICAgICAgICAgICAgaWYgKHQuY2FsbChpLCBhLCBvLCBlKSkgci5wdXNoKGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfTtcclxufVxyXG5cclxuLypcclxuICAgQXJyYXkgbWFwIHBhdGNoXHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbmlmICghKFwibWFwXCIgaW4gQXJyYXkucHJvdG90eXBlKSkge1xyXG4gICAgQXJyYXkucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uKHQsIGUpIHtcclxuICAgICAgICB2YXIgbiA9IHRoaXMubGVuZ3RoID4+PiAwLCByID0gQXJyYXkobik7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgaW4gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgcltpXSA9IHQuY2FsbChlLCB0aGlzW2ldLCBpLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcjtcclxuICAgIH07XHJcbn1cclxuXHJcbi8qXHJcbiAgICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCgpXHJcbiovXHJcbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcclxuICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24odCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIC8vIGNsb3Nlc3QgdGhpbmcgcG9zc2libGUgdG8gdGhlIEVDTUFTY3JpcHQgNVxyXG4gICAgICAgICAgICAvLyBpbnRlcm5hbCBJc0NhbGxhYmxlIGZ1bmN0aW9uXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbi5wcm90b3R5cGUuYmluZCAtIHdoYXQgaXMgdHJ5aW5nIHRvIGJlIGJvdW5kIGlzIG5vdCBjYWxsYWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGUgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCBuID0gdGhpcywgciA9IGZ1bmN0aW9uKCkge30sIGkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG4uYXBwbHkodGhpcyBpbnN0YW5jZW9mIHIgJiYgdCA/IHRoaXMgOiB0LCBlLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByLnByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xyXG4gICAgICAgIGkucHJvdG90eXBlID0gbmV3IHIoKTtcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgIH07XHJcbn1cclxuXHJcbi8vIEV2ZW50TGlzdGVuZXIgfCBNSVQvR1BMMiB8IGh0dHBzOi8vZ2l0aHViLmNvbS9qb25hdGhhbnRuZWFsL0V2ZW50TGlzdGVuZXJcclxudGhpcy5FbGVtZW50ICYmIEVsZW1lbnQucHJvdG90eXBlLmF0dGFjaEV2ZW50ICYmICFFbGVtZW50LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyICYmIGZ1bmN0aW9uKCkge1xyXG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XHJcbiAgICAgICAgV2luZG93LnByb3RvdHlwZVt0XSA9IEhUTUxEb2N1bWVudC5wcm90b3R5cGVbdF0gPSBFbGVtZW50LnByb3RvdHlwZVt0XSA9IGU7XHJcbiAgICB9XHJcbiAgICAvLyBhZGRcclxuICAgIHQoXCJhZGRFdmVudExpc3RlbmVyXCIsIGZ1bmN0aW9uKHQsIGUpIHtcclxuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBuLmFkZEV2ZW50TGlzdGVuZXIubGlzdGVuZXJzID0gbi5hZGRFdmVudExpc3RlbmVyLmxpc3RlbmVycyB8fCB7fSwgaSA9IHJbdF0gPSByW3RdIHx8IFtdO1xyXG4gICAgICAgIC8vIGlmIG5vIGV2ZW50cyBleGlzdCwgYXR0YWNoIHRoZSBsaXN0ZW5lclxyXG4gICAgICAgIGlmICghaS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbi5hdHRhY2hFdmVudChcIm9uXCIgKyB0LCBpLmV2ZW50ID0gZnVuY3Rpb24odCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGUgPSBuLmRvY3VtZW50ICYmIG4uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IG4uZG9jdW1lbnRFbGVtZW50IHx8IHtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxMZWZ0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogMFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vIHBvbHlmaWxsIHczYyBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzXHJcbiAgICAgICAgICAgICAgICB0LmN1cnJlbnRUYXJnZXQgPSBuO1xyXG4gICAgICAgICAgICAgICAgdC5wYWdlWCA9IHQuY2xpZW50WCArIGUuc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgICAgIHQucGFnZVkgPSB0LmNsaWVudFkgKyBlLnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgIHQucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdC5yZWxhdGVkVGFyZ2V0ID0gdC5mcm9tRWxlbWVudCB8fCBudWxsO1xyXG4gICAgICAgICAgICAgICAgdC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHQuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHQudGFyZ2V0ID0gdC5zcmNFbGVtZW50IHx8IG47XHJcbiAgICAgICAgICAgICAgICB0LnRpbWVTdGFtcCA9ICtuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGFuIGNhY2hlZCBsaXN0IG9mIHRoZSBtYXN0ZXIgZXZlbnRzIGxpc3QgKHRvIHByb3RlY3QgdGhpcyBsb29wIGZyb20gYnJlYWtpbmcgd2hlbiBhbiBldmVudCBpcyByZW1vdmVkKVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDAsIG8gPSBbXS5jb25jYXQoaSksIGEsIGwgPSB0cnVlOyBsICYmIChhID0gb1tyXSk7ICsrcikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIHRvIHNlZSBpZiB0aGUgY2FjaGVkIGV2ZW50IHN0aWxsIGV4aXN0cyBpbiB0aGUgbWFzdGVyIGV2ZW50cyBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDAsIHM7IHMgPSBpW2NdOyArK2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPT0gYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5jYWxsKG4sIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhZGQgdGhlIGV2ZW50IHRvIHRoZSBtYXN0ZXIgZXZlbnQgbGlzdFxyXG4gICAgICAgIGkucHVzaChlKTtcclxuICAgIH0pO1xyXG4gICAgLy8gcmVtb3ZlXHJcbiAgICB0KFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiLCBmdW5jdGlvbih0LCBlKSB7XHJcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gbi5hZGRFdmVudExpc3RlbmVyLmxpc3RlbmVycyA9IG4uYWRkRXZlbnRMaXN0ZW5lci5saXN0ZW5lcnMgfHwge30sIGkgPSByW3RdID0gclt0XSB8fCBbXTtcclxuICAgICAgICAvLyByZW1vdmUgdGhlIG5ld2VzdCBtYXRjaGluZyBldmVudCBmcm9tIHRoZSBtYXN0ZXIgZXZlbnQgbGlzdFxyXG4gICAgICAgIGZvciAodmFyIG8gPSBpLmxlbmd0aCAtIDEsIGE7IGEgPSBpW29dOyAtLW8pIHtcclxuICAgICAgICAgICAgaWYgKGEgPT0gZSkge1xyXG4gICAgICAgICAgICAgICAgaS5zcGxpY2UobywgMSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiBubyBldmVudHMgZXhpc3QsIGRldGFjaCB0aGUgbGlzdGVuZXJcclxuICAgICAgICBpZiAoIWkubGVuZ3RoICYmIGkuZXZlbnQpIHtcclxuICAgICAgICAgICAgbi5kZXRhY2hFdmVudChcIm9uXCIgKyB0LCBpLmV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIGRpc3BhdGNoXHJcbiAgICB0KFwiZGlzcGF0Y2hFdmVudFwiLCBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgdmFyIGUgPSB0aGlzLCBuID0gdC50eXBlLCByID0gZS5hZGRFdmVudExpc3RlbmVyLmxpc3RlbmVycyA9IGUuYWRkRXZlbnRMaXN0ZW5lci5saXN0ZW5lcnMgfHwge30sIGkgPSByW25dID0gcltuXSB8fCBbXTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gZS5maXJlRXZlbnQoXCJvblwiICsgbiwgdCk7XHJcbiAgICAgICAgfSBjYXRjaCAobykge1xyXG4gICAgICAgICAgICBpZiAoaS5ldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaS5ldmVudCh0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyBDdXN0b21FdmVudFxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdpbmRvdy5wcm90b3R5cGUsIFwiQ3VzdG9tRXZlbnRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGUobiwgcikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0LmRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KCksIG87XHJcbiAgICAgICAgICAgICAgICBpLnR5cGUgPSBuO1xyXG4gICAgICAgICAgICAgICAgZm9yIChvIGluIHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobyA9PSBcImNhbmNlbGFibGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnJldHVyblZhbHVlID0gIXIuY2FuY2VsYWJsZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG8gPT0gXCJidWJibGVzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5jYW5jZWxCdWJibGUgPSAhci5idWJibGVzO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobyA9PSBcImRldGFpbFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuZGV0YWlsID0gci5kZXRhaWw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyByZWFkeVxyXG4gICAgZnVuY3Rpb24gZSh0KSB7XHJcbiAgICAgICAgaWYgKGUuaW50ZXJ2YWwgJiYgZG9jdW1lbnQuYm9keSkge1xyXG4gICAgICAgICAgICBlLmludGVydmFsID0gY2xlYXJJbnRlcnZhbChlLmludGVydmFsKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJET01Db250ZW50TG9hZGVkXCIpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlLmludGVydmFsID0gc2V0SW50ZXJ2YWwoZSwgMSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZSk7XHJcbn0oKTtcclxuXHJcbiF0aGlzLkN1c3RvbUV2ZW50ICYmIGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gQ3VzdG9tRXZlbnQgZm9yIGJyb3dzZXJzIHdoaWNoIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgdGhlIENvbnN0cnVjdG9yIG1ldGhvZFxyXG4gICAgd2luZG93LkN1c3RvbUV2ZW50ID0gZnVuY3Rpb24gdChlLCBuKSB7XHJcbiAgICAgICAgdmFyIHI7XHJcbiAgICAgICAgbiA9IG4gfHwge1xyXG4gICAgICAgICAgICBidWJibGVzOiBmYWxzZSxcclxuICAgICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGRldGFpbDogdW5kZWZpbmVkXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcclxuICAgICAgICAgICAgci5pbml0Q3VzdG9tRXZlbnQoZSwgbi5idWJibGVzLCBuLmNhbmNlbGFibGUsIG4uZGV0YWlsKTtcclxuICAgICAgICB9IGNhdGNoIChpKSB7XHJcbiAgICAgICAgICAgIC8vIGZvciBicm93c2VycyB3aGljaCBkb24ndCBzdXBwb3J0IEN1c3RvbUV2ZW50IGF0IGFsbCwgd2UgdXNlIGEgcmVndWxhciBldmVudCBpbnN0ZWFkXHJcbiAgICAgICAgICAgIHIgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xyXG4gICAgICAgICAgICByLmluaXRFdmVudChlLCBuLmJ1YmJsZXMsIG4uY2FuY2VsYWJsZSk7XHJcbiAgICAgICAgICAgIHIuZGV0YWlsID0gbi5kZXRhaWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfTtcclxufSgpOyIsIi8qXHJcblx0c29ja2V0cy5qc1xyXG4qL1xyXG5cclxuLy8gZGVwZW5kZW5jaWVzIGZvciB0aGlzIG1vZHVsZSBnbyBoZXJlXHJcbi8vIHZhciBVSSA9IHJlcXVpcmUoJy4vdWknKTtcclxuXHJcbnZhciBTb2NrZXRzID0ge1xyXG5cdHNvY2tldCA6IG51bGwsXHJcblxyXG5cdGluaXQgOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRjb25zb2xlLmRlYnVnKCdTb2NrZXRzIG1vZHVsZSBpcyBiZWluZyBpbml0aWFsaXNlZCcpO1xyXG5cclxuXHRcdHRoaXMubWFrZVNvY2tldENvbm5lY3Rpb24oKTtcclxuXHJcblx0XHR0aGlzLkxpc3RlbmVycy5zZXR1cCgpO1xyXG5cdH0sXHJcblxyXG5cdG1ha2VTb2NrZXRDb25uZWN0aW9uIDogZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIGNvbm5lY3Rpb25VUkwgPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgKyAnOicgKyB3aW5kb3cubG9jYXRpb24ucG9ydDtcclxuXHJcblx0XHR0aGlzLnNvY2tldCA9IGlvLmNvbm5lY3QoY29ubmVjdGlvblVSTCk7XHJcblx0fSxcclxuXHJcblx0TGlzdGVuZXJzIDoge1xyXG5cdFx0c2V0dXAgOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFNvY2tldHMuc29ja2V0Lm9uKCd0cmFpbnRpbWVzJywgdGhpcy5vblRpbWVzUmVjZWl2ZWQpO1xyXG5cdFx0fSxcclxuXHRcdG9uVGltZXNSZWNlaXZlZCA6IGZ1bmN0aW9uICh0aW1lcykge1xyXG5cdFx0XHQvLyBsb2coJ3RpbWVzIHJlY2VpdmVkJywgdGltZXMpO1xyXG5cclxuXHRcdFx0dmFyIHRpbWV0YWJsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50cmFpblRpbWV0YWJsZScpLFxyXG5cdFx0XHRcdHRhYmxlSFRNTCA9ICcnXHJcblxyXG5cdFx0XHRmb3IgKHRpbWUgaW4gdGltZXMudHJhaW5TZXJ2aWNlcykge1xyXG5cdFx0XHRcdHRhYmxlSFRNTCArPSBgPHRyPlxyXG5cdFx0XHRcdDx0ZD4ke3RpbWVzLnRyYWluU2VydmljZXNbdGltZV0uc3RkfTwvdGQ+XHJcblx0XHRcdFx0PHRkPiR7dGltZXMudHJhaW5TZXJ2aWNlc1t0aW1lXS5ldGR9PC90ZD5cclxuXHRcdFx0XHQ8dGQ+JHt0aW1lcy50cmFpblNlcnZpY2VzW3RpbWVdLnBsYXRmb3JtfTwvdGQ+XHJcblx0XHRcdFx0PHRkPiR7dGltZXMudHJhaW5TZXJ2aWNlc1t0aW1lXS5vcGVyYXRvcn08L3RkPmA7XHJcblx0XHRcdH1cclxuXHRcdFx0dGltZXRhYmxlLmlubmVySFRNTCA9IHRhYmxlSFRNTDtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldHM7IiwiLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4vLyBERUZJTkUgR0xPQkFMIExJQlMgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuLy8gVW5jb21tZW50IHRoZSBsaW5lIGJlbG93IHRvIGV4cG9zZSBqUXVlcnkgYXMgYSBnbG9iYWwgb2JqZWN0IHRvIHRoZSB1c3VhbCBwbGFjZXNcbi8vIHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IHJlcXVpcmUoJy4vbGlicy9qcXVlcnkvanF1ZXJ5LTEuMTAuMi5qcycpO1xuXG4vLyBmb3JjZSBjb21waWxhdGlvbiBvZiBnbG9iYWwgbGlicyB0aGF0IGRvbid0IHJldHVybiBhIHZhbHVlLlxucmVxdWlyZShcIi4vaGVscGVycy9sb2dcIik7XG5yZXF1aXJlKFwiLi9oZWxwZXJzL3NoaW1zXCIpO1xuXG52YXIgU29ja2V0cyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9zb2NrZXRzJyk7XG5cblxuLy9pbml0aWFsaXNlIEtPIG9iamVjdFxudmFyIEtPID0ge307XG5cbktPLkNvbmZpZyA9IHtcblx0aW5pdCA6IGZ1bmN0aW9uICgpIHtcblx0XHRTb2NrZXRzLmluaXQoKTtcblx0fVxufTtcblxuXG5LTy5Db25maWcuaW5pdCgpOyJdfQ==
